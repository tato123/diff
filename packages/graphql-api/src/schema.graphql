type Project {
  id: String
  hostname: String
  protocol: String
  creator: String
  created: String
  name: String
  description: String

  # User information
  contributors: [User]

  # changes
  changes: [Delta]
}

type User {
  sub: String!
  picture: String
  email: String
  subscription: CustomerSubscription
}

type Delta {
  id: String
  projectId: String
  checksum: String
  type: String
  as: String
  value: String
  creator: String
  created: String

  # Parent relationship
  project: Project
}

type CustomerSubscription {
  plan: String
  status: String
}

# ## ----------------------------------
# ## Inputs

input CreateProjectInput {
  url: String
  name: String
  description: String
}

enum DeltaType {
  file
  base64
}

input CreateDeltaInput {
  projectId: String
  value: String
  type: DeltaType
  as: String
}

input NullMutation {
  _: String
}

input CreateCustomerInput {
  source: String!
}

# ## ----------------------------------
# ## Queries

type Query {
  # Project queries
  project(id: String!): Project
  projects(uid: String, archived: Boolean): [Project]

  # Delta queries
  delta(id: String!): Project
  deltas(projectId: String): Delta

  # User queries
  user(id: String): User
}

# ## ----------------------------------
# ## Subscriptions

type Subscription {
  customerSubscriptionChange: CustomerSubscription
  onAddProject(uid: String): Project
  onDeleteProject(uid: String): Project
  onAddDelta: Delta
  onDeleteDelta: Delta
}

# ## ----------------------------------
# ## Mutations

type Mutation {
  createProject(input: CreateProjectInput): Project
  createDelta(input: CreateDeltaInput): Delta
  subscribeCustomerToPlan(input: CreateCustomerInput!): CustomerSubscription
  cancelSubscription(input: NullMutation): CustomerSubscription
}
