type Origin {
  host: String
  origin: String
  protocol: String
  uid: String
  created: String
}

type Delta {
  host: String
  css: String
  changes: String
  uid: String
  created: String
}

input LimitQuery {
  mine: Boolean
}

type Query {
  origin(Host: String!): Origin
  origins( limit:LimitQuery): [Origin]
  deltas(Host: String!) : Delta
}

type Counter {
  count: Int!
  countStr: String
}

type Subscription {
  events: Counter!
}

type UploadResult {
  status: String!
}

scalar Upload

input UploadDesignMeta {
  name: String!
}


input CreateSiteOriginInput {
  url: String!
}

type CreateSiteOriginResult {
  prototypeUrl: String!
}

input SaveSiteDeltasInput {
  host: String!
  deltas: String!
}

type SaveSiteDeltasResult {
  prototypeUrl: String!
}

# Create customer

input CreateCustomerInput {
  source: String!
}

type CreateCustomerResult {
  customerId: String!
}


# Mutations
type Mutation {
  uploadDesign(file: Upload!, metaData: UploadDesignMeta): UploadResult
  createSiteOrigin(input: CreateSiteOriginInput!): CreateSiteOriginResult
  createCustomer(input: CreateCustomerInput!) : CreateCustomerResult
  saveSiteDeltas(input: SaveSiteDeltasInput!): SaveSiteDeltasResult
}
