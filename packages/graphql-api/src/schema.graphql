type Origin {
  host: String
  origin: String
  accountId: String
}

type Invite {
  email: String
  firstName: String
  invitedBy: String
  lastName: String
  status: String
  workspaceId: String
  id: String
}

type User {
  aud: String
  email: String
  email_verified: Boolean
  exp: Int
  family_name: String
  gender: String
  given_name: String
  iat: Int
  iss: String
  locale: String
  name: String
  nickname: String
  picture: String
  plan: String
  sub: String
  updated_at: String
}

type Component {
  created: String
  metageneration: String
  name: String
  updated: String
  url: String
}

type Query {
  allInvites: [Invite]
  allUsers: [User]
  allComponents: [Component]
  origin(Host: String): Origin
  allOrigins: [Origin]
}

type Counter {
  count: Int!
  countStr: String
}

type Subscription {
  events: Counter!
}

type UploadResult {
  status: String!
}

scalar Upload

input UploadDesignMeta {
  name: String!
}

input SiteChangeInput {
  origin: String!
  changes: String!
}

type CreateSiteChangeResult {
  status: String!
  versionUrl: String
}

input CreateSiteOriginInput {
  url: String!
}

type CreateSiteOriginResult {
  prototypeUrl: String!
}

input SaveSiteDeltasInput {
  versionUrl: String!
  deltas: String!
}

type SaveSiteDeltasResult {
  prototypeUrl: String!
}

type Mutation {
  uploadDesign(file: Upload!, metaData: UploadDesignMeta): UploadResult
  createSiteChange(siteChange: SiteChangeInput!): CreateSiteChangeResult
  createSiteOrigin(input: CreateSiteOriginInput!): CreateSiteOriginResult
  saveSiteDeltas(input: SaveSiteDeltasInput!): SaveSiteDeltasResult
}
